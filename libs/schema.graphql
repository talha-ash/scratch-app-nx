schema {
  query: RootQueryType
  mutation: RootMutationType
}

type RootMutationType {
  "Get Login"
  login(username: String, email: String, password: String!): AuthSuccess

  "Get Register"
  register(username: String!, email: String!, passwordOne: String!, passwordTwo: String!): AuthSuccess

  "Get Refresh Token"
  refreshToken(refreshToken: String!): RefreshTokenSuccess

  "Create Recipe"
  createRecipe(
    name: String!, serveTime: Int!, categoryId: Int, nutritionFacts: [String]!, cookingSteps: [CookingStepInput]!, recipeImages: [RecipeImageInput]!, ingredients: [IngredientInput]!
  ): CreateRecipeSuccess

  "Update Recipe"
  updateRecipe(id: ID!, name: String!, categoryId: Int, serveTime: Int!, nutritionFacts: [String]!): CreateRecipeSuccess

  "Update Recipe Images"
  updateRecipeImages(id: ID!, recipeImages: [RecipeImageInput]!): UpdateRecipeImagesSuccess

  "Update Recipe Ingredients"
  updateRecipeIngredients(id: ID!, ingredients: [IngredientInput]): UpdateRecipeIngredientsSuccess

  "Update Recipe Cooking Steps"
  updateRecipeCookingSteps(id: ID!, cookingSteps: [CookingStepInput]): UpdateRecipeCookingStepsSuccess

  "Like Recipe"
  likeRecipe(recipeId: ID!): LikeRecipeSuccess

  "Create Category"
  createCategory(title: String!): CreateCategorySuccess

  "Save Recipe"
  saveRecipe(recipeId: ID!, categoryId: ID!): SaveRecipeSuccess

  "Follow User"
  followUser(followingId: ID!): FollowUserSuccess
}

type RootQueryType {
  "Get All Users"
  users: [User]

  getUserInfo: User

  "Get Recipe"
  getRecipe(id: ID!): Recipe

  "Get Categories"
  categories: [Category]
}

input IngredientInput {
  id: ID
  image: Upload
  description: String!
}

input CookingStepInput {
  step: Int!
  description: String!
  video: Upload
  videoTitle: String
}

input RecipeImageInput {
  id: ID
  image: Upload
}

"Create Recipe Successfull"
type CreateRecipeSuccess {
  id: Int
  name: String
  serveTime: Int
  categoryId: Int
  nutritionFacts: String
}

"Update Recipe Ingredients Successfull"
type UpdateRecipeIngredientsSuccess {
  ingredients: [Ingredient]
}

"Update Recipe Cooking Step Successfull"
type UpdateRecipeCookingStepsSuccess {
  cookingSteps: [CookingStep]
}

"Update Recipe Images Successfull"
type UpdateRecipeImagesSuccess {
  recipeImages: [RecipeImage]
}

"Update Recipe Images Successfull"
type LikeRecipeSuccess {
  message: String
}

"Create Category Successfull"
type CreateCategorySuccess {
  id: Int
  title: String
}

"Save Recipe By Category Successfull"
type SaveRecipeSuccess {
  id: Int
  userId: Int
  recipeId: Int
  categoryId: Int
}

type Ingredient {
  description: String
  imageUrl: String
}

type RecipeImage {
  imageUrl: String
}

type CookingStep {
  step: Int
  description: String
  videoTitle: String
  videoUrl: String
}

type Recipe {
  id: ID
  name: String
  serveTime: Int
  categoryId: Int
  nutritionFacts: String
  ingredients: [Ingredient]
  cookingSteps: [CookingStep]
  recipeImages: [RecipeImage]
}

type Category {
  id: ID
  title: String
}

"Represents an uploaded file."
scalar Upload

"Refresh Token Successfull"
type RefreshTokenSuccess {
  accessToken: String
  refreshToken: String
  exp: Int
}

"Auth Successfull"
type AuthSuccess {
  id: ID
  accessToken: String
  refreshToken: String
  user: User
  exp: Int
}

"A User"
type User {
  id: ID
  email: String
  age: String
  username: String
}

"Follow User Successfully"
type FollowUserSuccess {
  message: String
}
